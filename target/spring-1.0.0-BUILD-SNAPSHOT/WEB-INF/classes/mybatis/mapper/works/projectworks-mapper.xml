<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project">

    <select id="selectAll" resultType="com.end2end.spring.works.dto.ProjectDTO">
        SELECT
        p.*,
        CASE
        WHEN p.DEADLINE BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE + 5) THEN 'Y'
        ELSE 'N'
        END AS nearDeadline
        FROM project p
        ORDER BY
        CASE
        WHEN p.DEADLINE BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE + 5) THEN 1
        ELSE 2
        END,
        p.id DESC

    </select>
    <!-- 프로젝트 모아보기-->


    <select id="selectByprojectId" resultType="com.end2end.spring.employee.dto.EmployeeDTO">

        SELECT EMPLOYEE.* FROM
        PROJECT_USER
        JOIN EMPLOYEE
        ON PROJECT_USER.EMPLOYEEID = EMPLOYEE.ID WHERE PROJECTID = #{id}

    </select>
    <!-- 프로젝트 멤버 프로필 가져오기-->



    <update id="updateStatusByProjectId">

        UPDATE project SET status = 'finish' WHERE id = #{projectId}

    </update>
<!-- 프젝 상태 변환쿼리   -->



    <delete id="deleteMemberById">
        delete from PROJECT_USER where projectId=#{projectId}
        and employeeId=#{employeeId}
    </delete>
    <!-- 프로젝트 멤버 삭제-->

    <insert id="insertProject" parameterType="com.end2end.spring.works.dto.ProjectDTO">
        INSERT INTO project (id, name, deadline, hideYn, regDate)
        VALUES (PROJECT_ID_SEQ.NEXTVAL, #{name}, #{deadLine}, 'N', SYSDATE)

        <selectKey keyProperty="id" order="AFTER" resultType="int">
            SELECT PROJECT_ID_SEQ.currval FROM DUAL
        </selectKey>
    </insert>
    <!-- 프로젝트추가 -->


    <insert id="insertProjectUser" parameterType="com.end2end.spring.works.dto.ProjectUserDTO">
        INSERT INTO PROJECT_USER (id,projectId, employeeId)
        VALUES (PROJECT_USER_ID_SEQ.NEXTVAL,#{projectId}, #{employeeId})
    </insert>
    <!-- 프로젝트인원추가 -->


    <insert id="insertAllProjectUser">
        INSERT INTO PROJECT_USER(id, employeeId, projectId)
        SELECT PROJECT_USER_ID_SEQ.NEXTVAL, A.* FROM (
        <foreach collection="list" item="item" separator="UNION ALL">
            SELECT #{item.employeeId}, #{projectId} FROM DUAL
        </foreach>
        ) A
    </insert>


    <!--프로젝트수정-->
    <update id="updateById" parameterType="com.end2end.spring.works.dto.ProjectInsertDTO">
        update project set name=#{title}, deadLine = #{deadLine,jdbcType=DATE} WHERE id =#{projectId}
    </update>


    <!-- 기존프로젝트인원 비교 후 없으면 추가 -->
    <insert id="insertProjectMember" parameterType="com.end2end.spring.works.dto.ProjectUserDTO">
        INSERT INTO PROJECT_USER(id,projectId,employeeId)
        SELECT PROJECT_USER_ID_SEQ.NEXTVAL, #{projectId}, #{employeeId}
        FROM DUAL
        WHERE NOT EXISTS (
        SELECT 1 FROM PROJECT_USER
        WHERE projectId = #{projectId} AND employeeId = #{employeeId}
        )
    </insert>

    <select id="selectById" resultType="com.end2end.spring.works.dto.ProjectDTO">
        SELECT * FROM project
        WHERE id = #{id}
    </select>

<update id="hideById">
    UPDATE project set hideYn = #{hideYn} WHERE id = ${projectId}
</update>

    <!--제일 최근 등록된 프로젝트 찾기 -->
    <select id="findLatestProject" resultType="com.end2end.spring.works.dto.ProjectDTO">
        SELECT * FROM (
        SELECT * FROM project
        ORDER BY id DESC
        ) WHERE ROWNUM = 1
    </select>


    <!--  모달창에서 추가할 프로젝트 인원 검색-->
    <select id="selectByUser" resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT EMPLOYEE.*, DEPARTMENT.NAME AS departmentName, job.name as jobName
        FROM EMPLOYEE
        JOIN DEPARTMENT
        ON EMPLOYEE.DEPARTMENTID = DEPARTMENT.ID
        JOIN JOB
        ON EMPLOYEE.JOBID = JOB.ID
        WHERE EMPLOYEE.NAME LIKE #{name}

    </select>

    <!--프로젝트에 추가되어 있던 멤버-->
    <select id="getMembersByProjectId" resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT
        e.name,
        e.id,
        d.name AS departmentName,
        j.name AS jobName
        FROM
        project_user pu
        JOIN
        employee e ON pu.employeeId = e.id
        JOIN
        department d ON e.departmentId = d.id
        JOIN
        job j ON e.jobId = j.id
        WHERE
        pu.projectId = #{projectId}

    </select>

</mapper>
