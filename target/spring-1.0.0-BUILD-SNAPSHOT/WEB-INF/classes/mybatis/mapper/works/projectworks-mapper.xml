<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project">

    <select id="">
        select
        project_work.*,
        CASE
        WHEN DEADLINE BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE + 7) THEN '긴급'
        ELSE '안전'
        END as 긴급여부
        from project_work
    </select>

    <select id="selectAll" resultType="com.end2end.spring.works.dto.ProjectDTO">
        SELECT * from project order by id desc,
        CASE
        WHEN DEADLINE BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE + 7) THEN 'Y'
        ELSE 'N'
        END as nearDeadline
        from project
    </select>
    <!-- 프로젝트 모아보기-->

    <select id="selectByprojectId" resultType="com.end2end.spring.employee.dto.EmployeeDTO">

       SELECT EMPLOYEE.* FROM
        PROJECT_USER
        JOIN EMPLOYEE
        ON PROJECT_USER.EMPLOYEEID = EMPLOYEE.ID WHERE PROJECTID = #{id}

</select>
    <!-- 프로젝트 멤버 프로필 가져오기-->


    <delete id="deleteById" parameterType="Integer">
        delete from project where id=#{id}
    </delete>
    <!-- 프로젝트 삭제-->

    <insert id="insertProject" parameterType="com.end2end.spring.works.dto.ProjectDTO">
        INSERT INTO project (id, name, deadline, hideYn, regDate)
        VALUES (PROJECT_ID_SEQ.NEXTVAL, #{name}, #{deadLine}, 'N', SYSDATE)

        <selectKey keyProperty="id" order="AFTER" resultType="int">
            SELECT PROJECT_ID_SEQ.currval FROM DUAL
        </selectKey>
    </insert>
    <!-- 프로젝트추가 -->

<!--   -->
<!--    <select id="selectProjectMemberProfiles"  parameterType="int" resultType="com.end2end.spring.employee.dto.EmployeeDTO">-->
<!--        SELECT-->
<!--        e.profileImg-->
<!--        FROM-->
<!--        project_user p-->
<!--        INNER JOIN-->
<!--        employee e ON p.employeeId = e.id-->
<!--        WHERE-->
<!--        p.projectId = #{id}-->

<!--    </select>-->


<!--    <insert id="insertProjectUser" parameterType="com.end2end.spring.works.dto.ProjectUserDTO">-->
<!--        INSERT INTO PROJECT_USER (id, projectId, employeeId, regDate)-->
<!--        SELECT PROJECT_USER_SEQ.NEXTVAL, #{projectId}, e.employee_id, SYSDATE-->
<!--        FROM EMPLOYEE e-->
<!--        WHERE e.employee_id IN-->
<!--        <foreach item="employeeId" collection="employeeIds" open="(" separator="," close=")">-->
<!--            #{employeeId}-->
<!--        </foreach>-->
<!--    </insert>-->

    <insert id="insertProjectUser" parameterType="com.end2end.spring.works.dto.ProjectUserDTO">
        INSERT INTO PROJECT_USER (id,projectId, employeeId)
        VALUES (PROJECT_USER_ID_SEQ.NEXTVAL,#{projectId}, #{employeeId})
    </insert>
    <!-- 프로젝트인원추가 -->



    <insert id="insertAllProjectUser">
        INSERT INTO PROJECT_USER(id, employeeId, projectId)
        SELECT PROJECT_USER_ID_SEQ.NEXTVAL, A.* FROM (
        <foreach collection="list" item="item" separator="UNION ALL">
            SELECT #{item.employeeId}, ${projectId} FROM DUAL
        </foreach>
        ) A
    </insert>
    <update id="updateById">
        update project set name=${name}, deadLine=${deadLine} where id =${id}
    </update>
    <!--프로젝트수정-->

    <select id="selectById" resultType="com.end2end.spring.works.dto.ProjectDTO">
        SELECT * FROM project
        WHERE id = #{id}
    </select>

    <!--프로젝트 찾기 -->
    <select id="findLatestProject" resultType="com.end2end.spring.works.dto.ProjectDTO">
        SELECT * FROM (
        SELECT * FROM project
        ORDER BY id DESC
        ) WHERE ROWNUM = 1

    </select>


<!--  모달창에서 추가할 프로젝트 인원 검색-->
    <select id="selectByUser"  resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT EMPLOYEE.*, DEPARTMENT.NAME AS departmentName, job.name as jobName
        FROM EMPLOYEE
        JOIN DEPARTMENT
        ON EMPLOYEE.DEPARTMENTID = DEPARTMENT.ID
        JOIN JOB
        ON EMPLOYEE.JOBID = JOB.ID
        WHERE EMPLOYEE.NAME LIKE #{name}

    </select>
</mapper>