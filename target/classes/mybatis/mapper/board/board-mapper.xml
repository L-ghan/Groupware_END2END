<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board">

    <select id="toList" resultType="com.end2end.spring.board.dto.BoardDTO">
        SELECT
            B.*,
            E.NAME AS employeeName
        FROM BOARD B
                 JOIN EMPLOYEE E ON B.EMPLOYEEID = E.ID
        ORDER BY B.ID DESC
    </select>

    <select id="selectAllFromTo" resultType="com.end2end.spring.board.dto.BoardDTO">
        SELECT *
        FROM (
            SELECT
                BOARD.*, E.name AS employeeName, E.profileImg AS profileImg, NVL(R.replyCount, 0) AS replyCount,
                ROW_NUMBER() over (ORDER BY BOARD.id DESC) AS rnum
            FROM
                BOARD
            JOIN
                EMPLOYEE E
            ON BOARD.employeeId = E.id
            LEFT JOIN (
                SELECT COUNT(*) AS replyCount, boardId AS boardId
                FROM REPLY
                GROUP BY boardId) R
            ON BOARD.id = R.boardId
            ) A
        WHERE rnum BETWEEN ${start} AND ${end}
    </select>

    <select id="selectByCategoryId" resultType="com.end2end.spring.board.dto.BoardDTO">
        SELECT
            B.*,
            E.NAME AS employeeName
        FROM BOARD B
                 JOIN EMPLOYEE E ON B.EMPLOYEEID = E.ID
        WHERE B.BOARDCTID = #{categoryId}
        ORDER BY B.ID DESC
    </select>

    <select id="search" parameterType="map" resultType="com.end2end.spring.board.dto.BoardDTO">
        SELECT e.name as employeeName , b.*
        FROM board b
            join employee e
            on b.EMPLOYEEID = e.id
        <where>
            <choose>
                <when test="option == 'title'">
                    title LIKE '%' || #{keyword} || '%'
                </when>
                <when test="option == 'writer'">
                    e.name LIKE '%' || #{keyword} || '%'
                </when>
            </choose>
        </where>
        ORDER BY regDate DESC
    </select>



    <delete id="deleteById">
        delete from board where id = #{id}
    </delete>

    <select id="selectById" resultType="com.end2end.spring.board.dto.BoardDTO">
        SELECT B.*, E.NAME AS employeeName
        FROM BOARD B
        JOIN EMPLOYEE E ON B.EMPLOYEEID = E.ID
        WHERE B.ID = #{id}
    </select>

    <select id="selectCategoryByName" resultType="com.end2end.spring.board.dto.BoardCategoryDTO">
        SELECT * FROM BOARD_CATEGORY WHERE NAME = #{name}
    </select>

    <insert id="insertBoardCtUser">
        INSERT INTO BOARD_CT_USER(id,employeeId, boardCtId)
        VALUES (BOARD_CT_USER_ID_SEQ.NEXTVAL,#{employeeId},${boardCtId})
    </insert>

    <insert id="insert" parameterType="com.end2end.spring.board.dto.BoardDTO">
        insert into board (id, boardCtId, employeeId, title, content)
        values (${id}, #{boardCtId,jdbcType=INTEGER}, #{employeeId}, #{title}, #{content})
    </insert>

    <select id="selectNextVal" resultType="int">
        SELECT BOARD_ID_SEQ.nextval FROM DUAL
    </select>

    <update id="update" parameterType="com.end2end.spring.board.dto.BoardDTO">
        UPDATE board
        SET title = #{title},
            content = #{content}
        WHERE id = #{id}
    </update>

    <select id="selectRecent" resultType="com.end2end.spring.board.dto.BoardDTO">
        SELECT A.*
        FROM (
            SELECT
                BOARD.*,
                NVL(replyCount, 0) AS replyCount,
                EMPLOYEE.NAME as employeeName,
                EMPLOYEE.profileImg AS profileImg,
                ROW_NUMBER() over (ORDER BY BOARD.id DESC) AS rnum
            FROM BOARD
            JOIN EMPLOYEE
                ON BOARD.EMPLOYEEID = EMPLOYEE.ID
            LEFT JOIN (
                SELECT COUNT(*) AS replyCount, boardId
                FROM REPLY
                GROUP BY BOARDID) R
        ON R.boardId = BOARD.id) A
        WHERE rnum BETWEEN 1 AND 8
    </select>

    <update id="increaseViewCount">
        UPDATE BOARD SET VIEWCOUNT = VIEWCOUNT + 1 WHERE ID = ${id}
    </update>
</mapper>