<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="employee">

    <select id="selectAll" resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT
        e.id AS id,
        e.name,
        e.departmentId,
        d.name AS departmentName,
        e.jobId,
        j.name AS jobName,
        e.role AS role,
        e.contact
        FROM EMPLOYEE e
        JOIN DEPARTMENT d ON e.departmentId = d.id
        JOIN JOB j ON e.jobId = j.id
        WHERE resignDate IS null
        ORDER BY e.name ASC
    </select>

    <select id="selectFromTo" resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT A.*
        FROM (
            SELECT
                EMPLOYEE.*, DEPARTMENT.name AS departmentName, JOB.name AS jobName,
                ROW_NUMBER() over (ORDER BY DEPARTMENTID DESC, JOBID, EMPLOYEE.NAME) AS RNUM
            FROM EMPLOYEE
            JOIN DEPARTMENT
                ON EMPLOYEE.departmentId = DEPARTMENT.id
            JOIN JOB
                ON EMPLOYEE.jobId = JOB.id
            WHERE resignDate IS NULL) A
        WHERE A.RNUM BETWEEN ${start} AND ${end}
    </select>

    <select id="selectAllDepartment" resultType="com.end2end.spring.employee.dto.DepartmentDTO">
        SELECT * FROM DEPARTMENT
    </select>

    <select id="selectAllJob" resultType="com.end2end.spring.employee.dto.JobDTO">
        SELECT * FROM JOB
    </select>

    <insert id="insert">
        <selectKey keyProperty="id" resultType="String" order="BEFORE">
            SELECT CONCAT(to_char(trunc(sysdate), 'YYMMDD'), EMPLOYEE_ID_SEQ.NEXTVAL) FROM DUAL
        </selectKey>
        INSERT INTO EMPLOYEE(id, departmentId, jobId, email, name, profileImg, contact)
        VALUES (#{id}, ${departmentId}, ${jobId}, #{email}, #{name}, #{profileImg}, #{contact})
    </insert>

    <insert id="insertDetail">
        INSERT INTO EMPLOYEE_DETAIL(id, password, postcode, address, detailAddress, birthday, loginId)
        VALUES (#{id}, #{password}, ${postCode}, #{detailAddress}, #{address}, #{birthday}, #{loginId})
    </insert>

    <update id="update">
        UPDATE EMPLOYEE
        SET
        departmentId = #{departmentId},
        jobId = #{jobId},
        name = #{name},
        profileImg = #{profileImg},
        contact = #{contact}
        WHERE id = #{id}
    </update>

    <update id="updateDetail">
        UPDATE EMPLOYEE_DETAIL
        SET
        postCode = #{postCode},
        address = #{address},
        detailAddress = #{detailAddress}
        WHERE id = #{id}
    </update>

    <select id="selectByDepartmentId" resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT e.* , j.name as jobName
        FROM EMPLOYEE e
        join job j
        ON e.jobid = j.id
        WHERE departmentId = ${departmentId}
    </select>

    <select id="login" resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT EMPLOYEE.*, JOB.NAME AS jobName, DEPARTMENT.NAME AS departmentName
        FROM EMPLOYEE_DETAIL
        JOIN EMPLOYEE
            ON EMPLOYEE_DETAIL.ID = EMPLOYEE.ID
        JOIN JOB
            ON EMPLOYEE.jobId = JOB.id
        JOIN DEPARTMENT
            ON EMPLOYEE.departmentId = DEPARTMENT.id
        WHERE LOGINID = #{loginId}
        AND PASSWORD = #{password}
        AND RESIGNDATE IS NULL
    </select>

    <select id="selectDetailById" resultType="com.end2end.spring.employee.dto.EmployeeDetailDTO">
        SELECT
        e.id AS id,
        e.name,
        e.email,
        e.profileImg,
        e.departmentId,
        d.name AS departmentName,
        e.jobId,
        j.name AS jobName,
        e.role AS role,
        ed.loginId,
        ed.password,
        ed.postCode,
        ed.address,
        ed.detailAddress,
        e.contact,
        ed.birthday,
        ed.hiredDate as hiredate
        FROM EMPLOYEE_DETAIL ed
        JOIN EMPLOYEE e ON ed.id = e.id
        JOIN DEPARTMENT d ON e.departmentId = d.id
        JOIN JOB j ON e.jobId = j.id
        WHERE e.id = #{id}
    </select>

    <select id="selectJobById" resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT
        jobId
        FROM EMPLOYEE
        WHERE id = #{id}
    </select>

    <update id="roleUpdate">
        UPDATE EMPLOYEE
        SET role = #{role}
        WHERE id = #{id}
    </update>

    <delete id="deleteById">
        DELETE
        FROM EMPLOYEE
        WHERE id = #{id}
    </delete>

    <select id="idVali" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM EMPLOYEE_DETAIL
        WHERE loginId = #{loginId}
    </select>

    <select id="pwVali" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM EMPLOYEE_DETAIL
        WHERE password = #{value}
    </select>

    <select id="selectContactList" resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT
        e.name,
        e.departmentId,
        d.name AS departmentName,
        e.jobId,
        j.name AS jobName,
        e.profileImg as profileImg,
        e.contact
        FROM EMPLOYEE e
        JOIN DEPARTMENT d ON e.departmentId = d.id
        JOIN JOB j ON e.jobId = j.id
        WHERE resignDate IS null
        ORDER BY e.name ASC
    </select>

    <select id="searchContactList" parameterType="map" resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT
        e.id,
        e.name,
        e.departmentId,
        d.name AS departmentName,
        e.jobId,
        j.name AS jobName,
        e.profileImg AS profileImg,
        e.contact
        FROM EMPLOYEE e
        JOIN DEPARTMENT d ON e.departmentId = d.id
        JOIN JOB        j ON e.jobId        = j.id
        <where>
            AND e.resignDate IS NULL
            <choose>
                <when test="searchOption eq '이름'">
                    AND e.name    LIKE '%' || #{keyword} || '%'
                </when>
                <when test="searchOption eq '연락처'">
                    AND e.contact LIKE '%' || #{keyword} || '%'
                </when>
            </choose>
        </where>
        ORDER BY e.name ASC
    </select>

    <select id="searchEmployeeList" parameterType="map" resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT
        e.id,
        e.name,
        e.departmentId,
        d.name    AS departmentName,
        e.jobId,
        j.name    AS jobName,
        e.profileImg   AS profileImg,
        e.contact,
        e.role
        FROM EMPLOYEE e
        LEFT JOIN DEPARTMENT d ON e.departmentId = d.id
        LEFT JOIN JOB        j ON e.jobId        = j.id
        <where>
            AND e.resignDate IS NULL
            <choose>
                <when test="searchOption eq '이름'">
                    AND e.name  LIKE '%' || #{keyword} || '%'
                </when>
                <when test="searchOption eq '부서'">
                    AND d.name  LIKE '%' || #{keyword} || '%'
                </when>
                <when test="searchOption eq '직급'">
                    AND j.name  LIKE '%' || #{keyword} || '%'
                </when>
            </choose>
        </where>
        ORDER BY e.name ASC
    </select>


    <select id="countNoAuth" resultType="Integer">
        SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE role = 'NO_AUTH'
    </select>

    <select id="selectByThisMonthBirthday" resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT EMPLOYEE.*, EMPLOYEE_DETAIL.BIRTHDAY, JOB.NAME AS jobName, DEPARTMENT.NAME AS departmentName
        FROM EMPLOYEE
        JOIN EMPLOYEE_DETAIL
        ON EMPLOYEE.ID = EMPLOYEE_DETAIL.ID
        JOIN DEPARTMENT
        ON DEPARTMENT.ID = EMPLOYEE.DEPARTMENTID
        JOIN JOB
        ON JOB.ID = EMPLOYEE.JOBID
        WHERE
            EXTRACT(MONTH FROM BIRTHDAY) = TO_CHAR(SYSDATE, 'MM')
        ORDER BY TO_CHAR(birthday, 'DD')
    </select>

    <update id="changePw">
        UPDATE EMPLOYEE_DETAIL
        SET password = #{newPw}
        WHERE id = #{id}
    </update>

    <select id="selectByIdIn" resultType="com.end2end.spring.employee.dto.EmployeeDTO">
        SELECT EMPLOYEE.*, EMPLOYEE_DETAIL.BIRTHDAY, JOB.NAME AS jobName, DEPARTMENT.NAME AS departmentName
        FROM EMPLOYEE
        JOIN EMPLOYEE_DETAIL
        ON EMPLOYEE.ID = EMPLOYEE_DETAIL.ID
        JOIN DEPARTMENT
        ON DEPARTMENT.ID = EMPLOYEE.DEPARTMENTID
        JOIN JOB
        ON JOB.ID = EMPLOYEE.JOBID
        WHERE EMPLOYEE.id IN (
        <foreach collection="list" item="item" separator=",">
            #{item}
        </foreach>
        )
    </select>

    <update id="isResigned">
        UPDATE EMPLOYEE
        SET resigndate = SYSDATE
        WHERE id = #{id}
    </update>

    <select id="employeeAll" resultType="java.util.Map">
        SELECT
        d.name AS label,
        COUNT(*) AS count
        FROM EMPLOYEE e
        JOIN DEPARTMENT d ON e.departmentId = d.id
        WHERE e.RESIGNDATE IS NULL
        GROUP BY d.name
    </select>

    <select id="monthlyStats" resultType="java.util.Map">
        WITH months AS (
        SELECT LPAD(LEVEL, 2, '0') AS month
        FROM dual
        CONNECT BY LEVEL &lt;= 12
        ),
        join_counts AS (
        SELECT SUBSTR(id, 3, 2) AS month, COUNT(*) AS count
        FROM EMPLOYEE
        WHERE SUBSTR(id, 1, 2) = TO_CHAR(SYSDATE, 'YY')
        GROUP BY SUBSTR(id, 3, 2)
        ),
        resign_counts AS (
        SELECT TO_CHAR(resignDate, 'MM') AS month, COUNT(*) AS count
        FROM EMPLOYEE
        WHERE resignDate IS NOT NULL
        AND EXTRACT(YEAR FROM resignDate) = TO_CHAR(SYSDATE, 'YYYY')
        GROUP BY TO_CHAR(resignDate, 'MM')
        )
        SELECT m.month, NVL(j.count, 0) AS count, 'join' AS type
        FROM months m
        LEFT JOIN join_counts j ON m.month = j.month

        UNION ALL

        SELECT m.month, NVL(r.count, 0) AS count, 'resign' AS type
        FROM months m
        LEFT JOIN resign_counts r ON m.month = r.month
        ORDER BY type, month
    </select>

    <select id="vacationStats" resultType="java.util.Map">
        SELECT
        DEPARTMENT.NAME AS label,
        A.remaining_days AS remain,
        B.used_days AS used
        FROM (
        SELECT
        NVL(SUM("휴가일"), 0) AS remaining_days,
        DEPARTMENTID AS departmentId
        FROM EMPLOYEE E
        LEFT JOIN (
        SELECT EMPLOYEEID, SUM(DATES) AS "휴가일"
        FROM VACATION_MANAGEMENT
        GROUP BY EMPLOYEEID
        ) V ON E.ID = V.EMPLOYEEID
        GROUP BY DEPARTMENTID
        ) A
        JOIN (
        SELECT
        NVL(SUM(VACATIONDATE), 0) AS used_days,
        DEPARTMENTID
        FROM EMPLOYEE
        LEFT JOIN (
        SELECT VACATION.*, VACATION.EMPLOYEEID AS empId
        FROM VACATION
        JOIN APPROVAL ON VACATION.APPROVALID = APPROVAL.ID
        WHERE APPROVAL.STATE = 'SUBMIT'
        ) V ON EMPLOYEE.ID = V.empId
        GROUP BY DEPARTMENTID
        ) B ON A.DEPARTMENTID = B.DEPARTMENTID
        JOIN DEPARTMENT ON DEPARTMENT.ID = A.departmentId
    </select>

    <select id="attendanceStats" resultType="java.util.Map">
        SELECT
        d.name AS label,
        SUM(CASE WHEN s.state = 'LATE' THEN 1 ELSE 0 END) AS late,
        SUM(CASE WHEN s.state = 'LEAVE_EARLY' THEN 1 ELSE 0 END) AS early,
        SUM(CASE WHEN s.state = 'ABSENCE' THEN 1 ELSE 0 END) AS absent
        FROM SOLDERING s
        JOIN EMPLOYEE e ON s.employeeId = e.id
        JOIN DEPARTMENT d ON e.departmentId = d.id
        WHERE e.resignDate IS NULL
        GROUP BY d.name
    </select>

    <select id="findByLoginId"  resultType="java.lang.String">
        SELECT loginId FROM EMPLOYEE_DETAIL WHERE ID = #{value}
    </select>

    <select id="selectByDepartmentList" resultType="com.end2end.spring.employee.dto.DepartmentDTO">
        select * from department
    </select>

    <insert id="insertDepartment">
        INSERT INTO department (ID, NAME, EMAIL) VALUES
        (DEPARTMENT_ID_SEQ.NEXTVAL,
        #{name},
        #{email} )
    </insert>

    <select id="existsById" resultType="int">
        SELECT COUNT(*) FROM department WHERE id = #{id}
    </select>

    <update id="updateDepartment" parameterType="map">
        update department set name = #{name}, email = #{email} where id = #{id}
    </update>

    <delete id="deleteByDepartmentId">
        DELETE FROM department
        WHERE id = #{value}
    </delete>

</mapper>