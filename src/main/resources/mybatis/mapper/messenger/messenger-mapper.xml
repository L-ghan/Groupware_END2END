<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="messenger">

    <select id="selectEmployeeAll" parameterType="map" resultType="com.end2end.spring.messenger.dto.MessengerEmployeeListDTO">
        select
        e.id, e.name, d.name teamName, j.name as jobName
        from employee e
        join department d
        on e.departmentid = d.id
        join job j
        on e.jobid = j.id
        where e.id != #{value}
        order by j.id asc, d.id, e.name asc
    </select>

    <insert id="messageSecondInsert">
        insert into message_room(id, name) values (#{value1}, #{value2})
    </insert>

    <!-- 방 초대 -->
    <update id="messageRoomInvite">
        UPDATE message_room
        SET name = name || '|' || #{employeeId}
        WHERE id = #{roomId}
    </update>

    <!-- 방 개설 -->
    <insert id="messageFirstInsert" parameterType="map">
        insert into message_room(id, name) values (message_room_id_seq.nextval, #{value})
        <selectKey order="AFTER" keyProperty="id" resultType="int">
            select message_room_id_seq.currval from dual
        </selectKey>
    </insert>

    <!-- 방 입장 처리 -->
    <insert id="messageFirstRoomInsert" parameterType="map">
        insert into message_room_user(id, messageRoomId, employeeId) values (message_room_user_id_seq.nextval, #{roomSeq}, #{employeeId})
        <selectKey order="AFTER" keyProperty="id" resultType="int">
            select message_room_user_id_seq.currval from dual
        </selectKey>
    </insert>

    <!--메세지 insert-->
    <insert id="messageFirstContentInsert">
        insert into message(id, messageRoomId, messageRoomuserId, content)
        values (message_id_seq.nextval, #{messageRoomId} , #{messageRoomUserId}, #{messageContent})
    </insert>

    <select id="selectRoomListAll" parameterType="map" resultType="com.end2end.spring.messenger.dto.ChatRoomListDTO">
        select t.MESSAGEROOMID, t.roomName, t.lastMessage
        from (
        select
        mru.MESSAGEROOMID,
        mr.name as roomName,
        m.content as lastMessage,
        row_number() over (partition by mru.MESSAGEROOMID order by m.regdate desc) as rn
        from message_room_user mru
        join message_room mr on mru.MESSAGEROOMID = mr.ID
        join message m on m.MESSAGEROOMID = mru.MESSAGEROOMID
        where mru.EMPLOYEEID = #{value}
        ) t
        where t.rn = 1
        order by t.MESSAGEROOMID desc
    </select>

    <select id="selectMessageByRoomId" parameterType="map" resultType="com.end2end.spring.messenger.dto.MessageHistoryDTO">
        SELECT MESSAGE.id, employee.id employeeId, MESSAGE.content , EMPLOYEE.NAME, EMPLOYEE.PROFILEIMG, JOB.NAME jName, DEPARTMENT.NAME dName, MESSAGE.REGDATE
        FROM
        MESSAGE
        JOIN
        MESSAGE_ROOM_USER
        ON MESSAGE.MESSAGEROOMUSERID = MESSAGE_ROOM_USER.ID
        JOIN
        EMPLOYEE
        ON MESSAGE_ROOM_USER.EMPLOYEEID = EMPLOYEE.ID
        JOIN
        JOB
        ON EMPLOYEE.JOBID = JOB.ID
        JOIN
        DEPARTMENT
        ON DEPARTMENT.ID = EMPLOYEE.DEPARTMENTID
        WHERE
        MESSAGE.MESSAGEROOMID = #{value}
    </select>

    <select id="findByRoomId" resultType="int">
        select id from MESSAGE_ROOM where name = #{value}
    </select>

    <select id="findRoomUser" parameterType="map" resultType="int">
        SELECT id FROM message_room_user WHERE messageRoomId = #{roomId} AND employeeId = #{employeeId}
    </select>

    <select id="selectRoomByName" parameterType="map" resultType="int">
        select id from message_room where name = #{value}
    </select>

    <select id="findByRoomSeq" resultType="int">
        select message_room_id_seq.nextval from dual
    </select>

    <select id="selectRoomById" parameterType="map" resultType="int">
        select * from message where messageRoomId = #{value}
    </select>

    <select id="selectUserByEmployeeIdAndRoomId" parameterType="map" resultType="com.end2end.spring.messenger.dto.MessageHistoryDTO">
        select * from message_room_user where employeeId = #{employeeId} and messageRoomId = #{roomId}
    </select>

    <insert id="insertMessage">
        insert into message(id, messageRoomId, messageRoomuserId, content)
        values (message_id_seq.nextval, #{messagerRoomId} , #{messagerRoomuserId}, #{content})
    </insert>
    <select id="selectRoomById" resultType="int">
        select * from message_room_user where MESSAGEROOMID = #{value}
    </select>
</mapper>
