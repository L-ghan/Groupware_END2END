<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="messenger">

    <select id="selectEmployeeAll" parameterType="map" resultType="com.end2end.spring.messenger.dto.MessengerEmployeeListDTO">
        select
        e.id, e.name, d.name teamName, j.name as jobName
        from employee e
        join department d
        on e.departmentid = d.id
        join job j
        on e.jobid = j.id
        where e.id != #{value}
        order by j.id asc, d.id, e.name asc
    </select>

    <insert id="messageSecondInsert">
        insert into message_room(id, name) values (#{value1}, #{value2})
    </insert>

    <!-- 방 초대 -->
    <update id="messageRoomInvite">
        UPDATE message_room
        SET name = name || '|' || #{employeeId}
        WHERE id = #{roomId}
    </update>

    <!-- 방 개설 -->
    <insert id="messageFirstInsert" parameterType="map">
        insert into message_room(id, name) values (message_room_id_seq.nextval, #{value})
        <selectKey order="AFTER" keyProperty="id" resultType="int">
            select message_room_id_seq.currval from dual
        </selectKey>
    </insert>

    <!-- 방 입장 처리 -->
    <insert id="messageFirstRoomInsert" parameterType="map">
        insert into message_room_user(id, messageRoomId, employeeId) values (message_room_user_id_seq.nextval, #{roomSeq}, #{employeeId})
        <selectKey order="AFTER" keyProperty="id" resultType="int">
            select message_room_user_id_seq.currval from dual
        </selectKey>
    </insert>

    <!--메세지 insert-->
    <insert id="messageFirstContentInsert">
        insert into message(id, messageRoomId, messageRoomuserId, content)
        values (message_id_seq.nextval, #{messageRoomId} , #{messageRoomUserId}, #{messageContent})
    </insert>

    <select id="selectRoomListAll" parameterType="map" resultType="com.end2end.spring.messenger.dto.ChatRoomListDTO">
        select t.MESSAGEROOMID, t.roomName, t.lastMessage
        from (
        select
        mru.MESSAGEROOMID,
        mr.name as roomName,
        m.content as lastMessage,
        row_number() over (partition by mru.MESSAGEROOMID order by m.regdate desc) as rn
        from message_room_user mru
        join message_room mr on mru.MESSAGEROOMID = mr.ID
        join message m on m.MESSAGEROOMID = mru.MESSAGEROOMID
        where mru.EMPLOYEEID = #{value}
        ) t
        where t.rn = 1
        order by t.MESSAGEROOMID desc
    </select>

    <select id="selectMessageByRoomId" parameterType="map" resultType="com.end2end.spring.messenger.dto.MessageHistoryDTO">
        select message_Room_User.id, message_Room_User.messageRoomId, message_Room_User.employeeId, message.content, employee.name, employee.profileImg, message.regDate
        from message_Room_User
        join employee
        on message_Room_User.employeeId = employee.id
        join message
        on message.messageRoomUserId = message_Room_User.id
        where message.messageRoomId = #{roomId}
        order by message.regDate asc
    </select>

    <select id="findByRoomId" resultType="int">
        select id from MESSAGE_ROOM where name = #{value}
    </select>

    <select id="findByRoomId2" resultType="com.end2end.spring.messenger.dto.MessageRoomDTO">
        select mr.*, mru.EMPLOYEEID
        from MESSAGE_ROOM mr
        join message_room_user mru
        on mr.id = mru.messageRoomId
        where mr.id = #{value}
    </select>

    <select id="findRoomUser" parameterType="map" resultType="int">
        SELECT id FROM message_room_user WHERE messageRoomId = #{roomId} AND employeeId = #{employeeId}
    </select>

    <select id="selectRoomByName" parameterType="map" resultType="int">
        select id from message_room where name = #{value}
    </select>

    <select id="findByRoomSeq" resultType="int">
        select message_room_id_seq.nextval from dual
    </select>

    <select id="selectUserByEmployeeIdAndRoomId" parameterType="map" resultType="com.end2end.spring.messenger.dto.MessageUserDTO">
        select mru.* ,e.name, e.profileImg
        from
        message_room_user mru
        join employee e
        on e.ID = mru.employeeId
        where mru.employeeId = #{employeeId}
        and mru.messageRoomId = #{roomId}
    </select>

    <insert id="insertMessage">
        insert into message(id, messageRoomId, messageRoomuserId, content)
        values (message_id_seq.nextval, #{messagerRoomId} , #{messagerRoomuserId}, #{content})
    </insert>

    <select id="selectRoomById" parameterType="map" resultType="com.end2end.spring.messenger.dto.MessageUserListDTO">
        select * from message_room_user where MESSAGEROOMID = #{value}
    </select>

    <select id="selectByName" resultType="int">
        SELECT COUNT(*) FROM message_room WHERE NAME = #{value}
    </select>

    <insert id="insertUser">
        INSERT INTO message_room_user (ID, MESSAGEROOMID, EMPLOYEEID)
        VALUES (MESSAGE_ROOM_USER_ID_SEQ.nextval, #{roomId}, #{employeeId})
    </insert>

    <update id="insertUsertoRoom">
        UPDATE message_room
        SET NAME = NAME || '|' || #{employeeId}
        WHERE ID = #{roomId}
    </update>

</mapper>
